##======================================================================================================
##
## Heatmap Paper Figure.5  
## using median model parameters to predict VE for a given combination of avidty and titre measurement. 
##
##======================================================================================================

## sample iteration number  
NN <- 2000 

## sequences to compute VE  ###
nanp_seq <- exp(seq(from=log(1000), to=log(2.0*max(nanp)), length=NN))
av_seq <- exp(seq(from=log(0.8), to=log(100), length=NN))

## Vaccine Efficacy Function ###
VE <- function(nanp, av){
  DR <- ( 1/(1+(nanp/b_nanp)^a_nanp) )*exp(-log(2)*av/b_av)
  VE_inf <- (r/(n*DR+r))^r
  VE_inf <- 1 - (1-VE_inf)/(1-(1-p)^r)
  
  VE_inf
}

### matrix to store VE prediction ###
VE_mat <- matrix(NA, nrow=NN, ncol=NN)

for(i in 1:nrow(VE_mat)){
  VE_mat[NN-i+1,] <- VE(nanp_seq, av_seq[NN-i+1])
}	

### plotting parameters  ###
Ncol = 10000
pp <- 0.5
colours = colorRampPalette(brewer.pal(9,"YlOrRd"))(10000)

col.sample <- seq(from=1, to=Ncol^(1/pp), length=floor(sqrt(Ncol)) )
col.sample <- floor(col.sample^pp)

colours <- colours[col.sample]

### base plot ###
image.plot(x=nanp_seq, y=av_seq, z=t(VE_mat), col=colours, log="x",
           xlab=expression(paste( " Anti-NANP Antibody Titre ")), ylab="Avidity Index",
           legend.lab="Vaccine Efficacy", xaxt='n',
                      axis.args=list(at=c(0.2,0.4,0.6,0.8,1),
                          labels=c("20%", "40%", "60%" , "80%", "100%")), las=1) 

axis(1, at=c(1000,2000,5000,10000,20000,50000,100000), label=c("1000", "2000", "5000", 
                                                               "10000", "20000", "50000", "100000"))

### calculate interquartile ranges  ###
nanp_med <- quantile(NANP, prob=0.5)
nanp_low <- quantile(NANP, prob=0.1)
Ananp_high <- quantile(NANP, prob=0.9)

av_med  <- quantile(avidity, prob=0.5)
av_low  <- quantile(avidity, prob=0.1)
av_high <- quantile(avidity, prob=0.9)

points(x=rep(nanp_med,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1.5, col="grey39")
points(x=rep(nanp_low,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1, col="grey39")
points(x=rep(nanp_high,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1, col="grey39")

points(x=c(0.001, 1000000), y=rep(av_med,2),
       type='l', lty="longdash", lwd=1.5, col="grey39")
points(x=c(0.001, 1000000), y=rep(av_low,2),
       type='l', lty="longdash", lwd=1, col="grey39")
points(x=c(0.001, 1000000), y=rep(av_high,2), 
       type='l', lty="longdash", lwd=1, col="grey39")

### data points ###
infect_col <- rep("white", length(infect_fx))

infect_col[which(infect_fx==1)] <- "greenyellow"

infect_col2 <- rep("white", length(infect_std))

infect_col2[which(infect_std==1)] <- "greenyellow"

points(x=nanp_fx, y=avidity_fx, pch="*", cex=2, col=infect_col)
points(x=nanp_std, y=avidity_std, pch=19, cex=1.3, col=infect_col2)


### Calculate isoclines ###
av_long <- exp(seq(from=log(0.001), to=log(100), length=100000))

av_30 <- rep(NA, NN)
av_50 <- rep(NA, NN)
av_70 <- rep(NA, NN)
av_90 <- rep(NA, NN)

for(i in 1:NN){
  av_30[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.3)^2 ) ] 	
  av_50[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.5)^2 ) ]
  av_70[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.7)^2 ) ]
  av_90[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.9)^2 ) ]
}

points(x=nanp_seq, y=av_30, type='l', lwd=2)
points(x=nanp_seq, y=av_50, type='l', lwd=2)
points(x=nanp_seq, y=av_70, type='l', lwd=2)
points(x=nanp_seq, y=av_90, type='l', lwd=2)

### add labels for isoklines ###
text(y=3+av_30[1], x=1500, labels="30%")

text(y=3+av_50[1], x=1500, labels="50%") 

text(y=2+av_70[1], x=1500, labels="70%")

text(y=2+av_80[1], x=1500, labels="90%") 
 
