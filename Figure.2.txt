############################################### 
## Time to Onset using survival curve plots  ##

#======================================================================================
## 1. plotting trial data  

## creating survival objects  

status <- infect  
time <- T  
trt[vaccine=="fx"] <- 1
trt[vaccine=="std"]<- 0 

df_observed <- data.frame(status, time, trt)


##################################################
## Antibody titre and avidity model predictions ##

# model predicted survival object  

#  fixed parameters
mult <- 3.8
pfT <- 50000000
t_L <- 6.5

N_imm <- 2000
N_sam <- 500000
N_sam2 <- 500000

nanp_infect <- nanp[which(infect==1)]
avidity_infect <- avidity[which(infect==1)]
Time_inf <- time[which(infect==1)]

Time_infect <- rep(NA[1:10])

for (i in 1:length(Time_infect)) {
  n_DR <- n * (( 1/(1+(nanp_infect[i]/b_nanp)^a_nanp)) * exp(-log(2)*avidity_infect[i]/b_av))
  n_DR <- max(n_DR, 1e-5)
  p_nb_DR = n_DR/( n_DR + r_nb )
  
  SPZ <- rnbinom(N_sam, size=r_nb, prob=1-p_nb_DR)
  if( 0 %in% SPZ ){
    SPZ <- SPZ[-which(SPZ==0)]
  }
  
  theta = (sig_mu^2)/mu
  k     = (mu/sig_mu)^2
  
  mero <- rgamma(length(SPZ), scale=theta, shape=SPZ*k )
  
  TT <- t_L - log( mero/PfT )/log(mult)
  
  Time_infect[i] <- quantile(TT, prob=c(0.5))
  
}

Time_infect
Time_inf

time
time_estimate <- time 
time_estimate[which(infect==1)] <- Time_infect
time_estimate

df_estimate <- data.frame(status, time_estimate, trt)
colnames(df_estimate) <- c("status", "time", "trt")

## compute survival curves by combining preditcted and observed survival functions ## 

obs <- survfit(Surv(time, status) ~ trt, data=df_observed)
est <- survfit(Surv(time, status) ~ trt, data=df_estimate)

fit <- list(OBS = obs, EST = est)

p1 <- ggsurvplot(fit,  combine = TRUE,     # Combine curves
           risk.table = TRUE,  tables.height = 0.25, # Adjust tables height
           break.time.by = 7 ,
           legend.labs=c("012M observed", "Fx017M observed", "012M predicted", "Fx017M predicted"),
           tables.theme = theme_cleantable(),       # Clean risk table
           censor = FALSE,                          # Remove censor points
           palette =  c( "blue","magenta" ,   "blue3" , "magenta3" ) ,
           fun = "event" ,
           xlab="Time from challenge (days)" , xlim = c(0,28) , linetype = c(1,1, 2, 2)
)

p1

#===================================================================================================================================
#===================================================================================================================================
# predictions taking only antibody titre into account  

ab_par_median = apply(X=MCMC_burn_M8[,1:5], MARGIN=2, FUN=median)

n_ab <- as.numeric(ab_par_median[1])
sig_n_ab <- as.numeric(ab_par_median[2])
sig_mu_ab <- as.numeric(ab_par_median[3])
b_nanp_ab <- as.numeric(ab_par_median[4])
a_nanp_ab <- as.numeric(ab_par_median[5])

p_ab <- (sig_n_ab^2-n_ab)/(sig_n_ab^2)
r_ab <- (n_ab^2)/(sig_n_ab^2-n_ab)

# estimated time to onset ab model only  

Time_infect_ab <- rep(NA[1:10])

for (i in 1:length(Time_infect_ab)) {
  n_DR_ab <- n_ab * (( 1/(1+(nanp_infect[i]/b_nanp_ab)^a_nanp_ab))) 
  n_DR_ab <- max(n_DR_ab, 1e-5)
  p_nb_DR_ab = n_DR_ab/( n_DR_ab + r_ab )
  
  SPZ_ab <- rnbinom(N_sam, size=r_ab, prob=1-p_nb_DR_ab)
  if( 0 %in% SPZ_ab ){
    SPZ_ab <- SPZ_ab[-which(SPZ_ab==0)]
  }
  
  theta_ab = (sig_mu_ab^2)/mu
  k_ab     = (mu/sig_mu_ab)^2
  
  mero_ab <- rgamma(length(SPZ_ab), scale=theta_ab, shape=SPZ_ab*k_ab )
  
  TT_ab <- t_L - log( mero_ab/PfT )/log(mult)
  
  Time_infect_ab[i] <- quantile(TT_ab, prob=c(0.5))
  
}

Time_infect_ab
Time_infect
Time_inf

time
time_estimate_ab <- time 
time_estimate_ab[which(infect==1)] <- Time_infect_ab
time_estimate_ab

df_estimate_ab <- data.frame(status, time_estimate_ab, trt)
colnames(df_estimate_ab) <- c("status", "time", "trt")

fit_ab <- survfit(Surv(df_estimate_ab$time, df_estimate_ab$status) ~ df_estimate_ab$trt)


# compute survival curves by combining preditcted and observed survival functions 

obs    <- survfit(Surv(time, status) ~ trt, data=df_observed)
est    <- survfit(Surv(time, status) ~ trt, data=df_estimate)
est_ab <- survfit(Surv(time, status) ~ trt, data=df_estimate_ab)

fit_ab <- list(OBS = obs,  AB = est_ab)

p2 <- ggsurvplot(fit_ab,  combine = TRUE,     # Combine curves
           risk.table = TRUE,  tables.height = 0.25, # Adjust tables height
           break.time.by = 7 ,
           legend.labs=c("012M observed", "Fx017M observed", "012M AB only", "Fx017M AB only"),
           tables.theme = theme_cleantable(),       # Clean risk table
           censor = FALSE,                          # Remove censor points
           palette =  c( "blue","magenta" ,   "blue3" , "magenta3" ) ,
           fun = "event" ,
           xlab="Time from challenge (days)" , xlim = c(0,28) , linetype = c(1,1, 2, 2 )
)

p2 
