####################################################################################################################################
## Code to generate the results from the section: Model Predicted Vaccine Efficacy as a Function of the Antibody Response  
## Section 1: Recreates Table.3 and the Efficacy Distributions 
## Section 2: Recreates Figure.5 - heatmap of predicted VE  
## Section 3: Recreates Figure.6 - VE dose-response 
####################################################################################################################################

################################
##        SECTION 1           ##
################################


### make objects for each parameter ###

par_median = apply(X=MCMC_burn_M5[,1:7], MARGIN=2, FUN=median)
n <- as.numeric(par_median[1])
sig_n <- as.numeric(par_median[2])
sig_mu <- as.numeric(par_median[3])
b_nanp <- as.numeric(par_median[4])
a_nanp <- as.numeric(par_median[5])
b_av <- as.numeric(par_median[6])
LogL <- as.numeric(par_median[7])

p <- (sig_n^2-n)/(sig_n^2)
r <- (n^2)/(sig_n^2-n)

### 1 VE against Infection across the whole study ###

### VE calculation ###
model_VE <- function(nanp, avidity, par_M5){
  n          <- par_M5[1]
  sig_n      <- par_M5[2]
  sig_mu     <- par_M5[3]
  b_nanp     <- par_M5[4]
  a_nanp     <- par_M5[5]
  b_av       <- par_M5[6]
  
  ############################
  ## Secondary NB parameters
  
  p = (sig_n^2-n)/(sig_n^2)
  r = (n^2)/(sig_n^2-n)
  #############################
  ## Dose response
  
  DR <- ( 1/(1+(nanp/b_nanp)^a_nanp) )* exp( -log(2)*(avidity/b_av) )
  
  VE_inf <- (r/(n*DR+r))^r
  VE_inf <-  1 - (1-VE_inf)/(1-(1-p)^r)
  VE_inf <- mean(VE_inf)
  
  VE_inf
  
}

model_VE = cmpfun(model_VE, options=list(optimize=3))

N_sam = 20000

sam_seq = round(seq(from=1, to=nrow(MCMC_burn_M5), length=N_sam))

M2_sam_test = matrix(NA, nrow=N_sam, ncol=length(avidity))

for(k in 1:N_sam){
  M2_sam_test[k,] = sapply(avidity, model_VE, nanp=nanp, par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_test = matrix(NA, nrow=3, ncol=length(avidity))

for(j in 1:length(avidity)){
  M2_quant_test[,j] = quantile( M2_sam_test[,j], prob=c(0.025, 0.5, 0.975) )
}

# lower CI
mean(M2_quant[1,])
#value
mean(M2_quant[2,])
#upper CI
mean(M2_quant[3,])

##########################################################################################################
##########################################################################################################
### 2. VE stratified by terciles of immune measurements 
  
nanp_low  <- quantile(nanp, prob=0.333)
nanp_high <- quantile(nanp, prob=0.667)

avidity_low  <- quantile(avidity, prob=0.333)
avidity_high <- quantile(avidity, prob=0.667)

nanp_1 <- which(nanp <= nanp_low)
nanp_2 <- intersect( which(nanp>nanp_low), which(nanp<=nanp_high) )
nanp_3 <- which(nanp > nanp_high)

avidity_1 <- which(avidity <= avidity_low)
avidity_2 <- intersect( which(avidity>avidity_low), which(avidity<=avidity_high) )
avidity_3 <- which(avidity > avidity_high)

### storage matrix ###
VE_pred <- matrix(NA, nrow=4, ncol=4)
VE_obs <- matrix(NA, nrow=4, ncol=4)
count <- matrix(NA, nrow=3, ncol=3)

### naming matrix cols and rows ####
colnames(VE_pred) <- c("nanp_1", "nanp_2", "nanp_3", "mean")
rownames(VE_pred) <- c("avidity_1", "avidity_2", "avidity_3", "mean")

colnames(VE_obs) <- c("nanp_1", "nanp_2", "nanp_3", "mean")
rownames(VE_obs) <- c("avidity_1", "avidity_2", "avidity_3", "mean")

colnames(VE_par_mat) <- c("nanp_1", "nanp_2", "nanp_3", "mean")
rownames(VE_par_mat) <- c("avidity_1", "avidity_2", "avidity_3", "mean")

colnames(count) <- c("nanp_1", "nanp_2", "nanp_3")
rownames(count) <- c("avidity_1", "avidity_2", "avidity_3")

### identifiers ###
C_11 <- intersect( avidity_1, nanp_1 )
C_12 <- intersect( avidity_1, nanp_2 )
C_13 <- intersect( avidity_1, nanp_3 )

C_21 <- intersect( avidity_2, nanp_1 )
C_22 <- intersect( avidity_2, nanp_2 )
C_23 <- intersect( avidity_2, nanp_3 )

C_31 <- intersect( avidity_3, nanp_1 )
C_32 <- intersect( avidity_3, nanp_2 )
C_33 <- intersect( avidity_3, nanp_3 )

### counts ###
count[1,1] <- length(C_11)
count[1,2] <- length(C_12)
count[1,3] <- length(C_13)

count[2,1] <- length(C_21)
count[2,2] <- length(C_22)
count[2,3] <- length(C_23)

count[3,1] <- length(C_31)
count[3,2] <- length(C_32)
count[3,3] <- length(C_33)

### observed VE ###
VE_obs[1,1]  <- 1 - sum(infect[C_11])/length(infect[C_11]) 
VE_obs[1,2]  <- 1 - sum(infect[C_12])/length(infect[C_12])
VE_obs[1,3]  <- 1 - sum(infect[C_13])/length(infect[C_13])

VE_obs[2,1]  <- 1 - sum(infect[C_21])/length(infect[C_21])  
VE_obs[2,2]  <- 1 - sum(infect[C_22])/length(infect[C_22])  
VE_obs[2,3]  <- 1 - sum(infect[C_23])/length(infect[C_23])  

VE_obs[3,1]  <- 1 - sum(infect[C_31])/length(infect[C_31]) 
VE_obs[3,2]  <- 1 - sum(infect[C_32])/length(infect[C_32])  
VE_obs[3,3]  <- 1 - sum(infect[C_33])/length(infect[C_33])  

VE_obs[1,4]  <- 1 - sum(infect[avidity_1])/length(infect[avidity_1])  
VE_obs[2,4]  <- 1 - sum(infect[avidity_2])/length(infect[avidity_2])
VE_obs[3,4]  <- 1 - sum(infect[avidity_3])/length(infect[avidity_3])

VE_obs[4,1]  <- 1 - sum(infect[nanp_1])/length(infect[nanp_1])  
VE_obs[4,2]  <- 1 - sum(infect[nanp_2])/length(infect[nanp_2])
VE_obs[4,3]  <- 1 - sum(infect[nanp_3])/length(infect[nanp_3])

VE_obs[4,4]  <- 1 - sum(infect)/length(infect)

#######################
#### Predicted VE #####

######################################
#### C_11 
N_sam = 20000

sam_seq = round(seq(from=1, to=nrow(MCMC_burn_M5), length=N_sam))

M2_sam_ll = matrix(NA, nrow=N_sam, ncol=length(avidity[C_11]))

for(k in 1:N_sam){
  M2_sam_ll[k,] = sapply(avidity[C_11], model_VE, nanp=nanp[C_11], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_ll = matrix(NA, nrow=3, ncol=length(avidity[C_11]))


for(j in 1:length(avidity[C_11])){
  M2_quant_ll[,j] = quantile( M2_sam_ll[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_ll[1,])
mean(M2_quant_ll[2,])
mean(M2_quant_ll[3,])

#####################################
#### C_12
M2_sam_12 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_12]))

for(k in 1:N_sam){
  M2_sam_12[k,] = sapply(avidity[C_12], model_VE, nanp=nanp[C_12], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_12 = matrix(NA, nrow=3, ncol=length(avidity[C_12]))


for(j in 1:length(avidity[C_12])){
  M2_quant_12[,j] = quantile( M2_sam_12[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_12[1,])
mean(M2_quant_12[2,])
mean(M2_quant_12[3,])


#####################################
#### C_13 

M2_sam_13 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_13]))

for(k in 1:N_sam){
  M2_sam_13[k,] = sapply(avidity[C_13], model_VE, nanp=nanp[C_13], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_13 = matrix(NA, nrow=3, ncol=length(avidity[C_13]))


for(j in 1:length(avidity[C_13])){
  M2_quant_13[,j] = quantile( M2_sam_13[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_13[1,])
mean(M2_quant_13[2,])
mean(M2_quant_13[3,])


####################################
## C_21

M2_sam_21 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_21]))

for(k in 1:N_sam){
  M2_sam_21[k,] = sapply(avidity[C_21], model_VE, nanp=nanp[C_21], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_21 = matrix(NA, nrow=3, ncol=length(avidity[C_21]))


for(j in 1:length(avidity[C_21])){
  M2_quant_21[,j] = quantile( M2_sam_21[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_21[1,])
mean(M2_quant_21[2,])
mean(M2_quant_21[3,])

#####################################
## C_22

M2_sam_22 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_22]))

for(k in 1:N_sam){
  M2_sam_22[k,] = sapply(avidity[C_22], model_VE, nanp=nanp[C_22], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_22 = matrix(NA, nrow=3, ncol=length(avidity[C_22]))


for(j in 1:length(avidity[C_22])){
  M2_quant_22[,j] = quantile( M2_sam_22[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_22[1,])
mean(M2_quant_22[2,])
mean(M2_quant_22[3,])

#####################################
## C_23

M2_sam_23 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_23]))

for(k in 1:N_sam){
  M2_sam_23[k,] = sapply(avidity[C_23], model_VE, nanp=nanp[C_23], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_23 = matrix(NA, nrow=3, ncol=length(avidity[C_23]))


for(j in 1:length(avidity[C_23])){
  M2_quant_23[,j] = quantile( M2_sam_23[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_23[1,])
mean(M2_quant_23[2,])
mean(M2_quant_23[3,])

#######################################
## C_31

M2_sam_31 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_31]))

for(k in 1:N_sam){
  M2_sam_31[k,] = sapply(avidity[C_31], model_VE, nanp=nanp[C_31], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_31 = matrix(NA, nrow=3, ncol=length(avidity[C_31]))


for(j in 1:length(avidity[C_31])){
  M2_quant_31[,j] = quantile( M2_sam_31[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_31[1,])
mean(M2_quant_31[2,])
mean(M2_quant_31[3,])


########################################
## C_32

M2_sam_32 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_32]))

for(k in 1:N_sam){
  M2_sam_32[k,] = sapply(avidity[C_32], model_VE, nanp=nanp[C_32], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_32 = matrix(NA, nrow=3, ncol=length(avidity[C_32]))


for(j in 1:length(avidity[C_32])){
  M2_quant_32[,j] = quantile( M2_sam_32[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_32[1,])
mean(M2_quant_32[2,])
mean(M2_quant_32[3,])

###########################################
## C_32

M2_sam_33 = matrix(NA, nrow=N_sam, ncol=length(avidity[C_33]))

for(k in 1:N_sam){
  M2_sam_33[k,] = sapply(avidity[C_33], model_VE, nanp=nanp[C_33], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_33 = matrix(NA, nrow=3, ncol=length(avidity[C_33]))


for(j in 1:length(avidity[C_33])){
  M2_quant_33[,j] = quantile( M2_sam_33[,j], prob=c(0.025, 0.5, 0.975) )
}

median(M2_quant_33[1,])
median(M2_quant_33[2,])
median(M2_quant_33[3,])

########################################
## 14

M2_sam_14 = matrix(NA, nrow=N_sam, ncol=length(avidity_1))

for(k in 1:N_sam){
  M2_sam_14[k,] = sapply(avidity[avidity_1], model_VE, nanp=nanp[avidity_1], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_14 = matrix(NA, nrow=3, ncol=length(avidity_1))


for(j in 1:length(avidity_1)){
  M2_quant_14[,j] = quantile( M2_sam_14[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_14[1,])
mean(M2_quant_14[2,])
mean(M2_quant_14[3,])

########################################
## 24

M2_sam_24 = matrix(NA, nrow=N_sam, ncol=length(avidity_2))

for(k in 1:N_sam){
  M2_sam_24[k,] = sapply(avidity[avidity_2], model_VE, nanp=nanp[avidity_2], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_24 = matrix(NA, nrow=3, ncol=length(avidity_2))


for(j in 1:length(avidity_2)){
  M2_quant_24[,j] = quantile( M2_sam_24[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_24[1,])
mean(M2_quant_24[2,])
mean(M2_quant_24[3,])

########################################
## 34

M2_sam_34 = matrix(NA, nrow=N_sam, ncol=length(avidity_3))

for(k in 1:N_sam){
  M2_sam_34[k,] = sapply(avidity[avidity_3], model_VE, nanp=nanp[avidity_3], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_34 = matrix(NA, nrow=3, ncol=length(avidity_3))


for(j in 1:length(avidity_3)){
  M2_quant_34[,j] = quantile( M2_sam_34[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_34[1,])
mean(M2_quant_34[2,])
mean(M2_quant_34[3,])

########################################
## 41

M2_sam_41 = matrix(NA, nrow=N_sam, ncol=length(nanp_1))

for(k in 1:N_sam){
  M2_sam_41[k,] = sapply(nanp[nanp_1], model_VE, avidity=avidity[nanp_1], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_41 = matrix(NA, nrow=3, ncol=length(nanp_1))


for(j in 1:length(nanp_1)){
  M2_quant_41[,j] = quantile( M2_sam_41[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_41[1,])
mean(M2_quant_41[2,])
mean(M2_quant_41[3,])

########################################
## 42

M2_sam_42 = matrix(NA, nrow=N_sam, ncol=length(nanp_2))

for(k in 1:N_sam){
  M2_sam_42[k,] = sapply(nanp[nanp_2], model_VE, avidity=avidity[nanp_2], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_42 = matrix(NA, nrow=3, ncol=length(nanp_2))


for(j in 1:length(nanp_2)){
  M2_quant_42[,j] = quantile( M2_sam_42[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_42[1,])
mean(M2_quant_42[2,])
mean(M2_quant_42[3,])

########################################
## 43

M2_sam_43 = matrix(NA, nrow=N_sam, ncol=length(nanp_3))

for(k in 1:N_sam){
  M2_sam_43[k,] = sapply(nanp[nanp_3], model_VE, avidity=avidity[nanp_3], par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_43 = matrix(NA, nrow=3, ncol=length(nanp_3))


for(j in 1:length(nanp_3)){
  M2_quant_43[,j] = quantile( M2_sam_43[,j], prob=c(0.025, 0.5, 0.975) )
}

mean(M2_quant_43[1,])
mean(M2_quant_43[2,])
mean(M2_quant_43[3,])

#################################################################################################################
################## put values into data frame = predicted values for Table.3 

### observed VE ###
VE_pred[1,1]  <- 1 - sum(infect[C_11])/length(infect[C_11]) 
VE_pred[1,2]  <- 1 - sum(infect[C_12])/length(infect[C_12]) 
VE_pred[1,3]  <- 1 - sum(infect[C_13])/length(infect[C_13]) 

VE_pred[2,1]  <- 1 - sum(infect[C_21])/length(infect[C_21])  
VE_pred[2,2]  <- 1 - sum(infect[C_22])/length(infect[C_22])  
VE_pred[2,3]  <- 1 - sum(infect[C_23])/length(infect[C_23])  

VE_pred[3,1]  <- 1 - sum(infect[C_31])/length(infect[C_31]) 
VE_pred[3,2]  <- 1 - sum(infect[C_32])/length(infect[C_32])  
VE_pred[3,3]  <- 1 - sum(infect[C_33])/length(infect[C_33])  

VE_pred[1,4]  <- 1 - sum(infect[avidity_1])/length(infect[avidity_1])  
VE_pred[2,4]  <- 1 - sum(infect[avidity_2])/length(infect[avidity_2])
VE_pred[3,4]  <- 1 - sum(infect[avidity_3])/length(infect[avidity_3])

VE_pred[4,1]  <- 1 - sum(infect[nanp_1])/length(infect[nanp_1])  
VE_pred[4,2]  <- 1 - sum(infect[nanp_2])/length(infect[nanp_2])
VE_pred[4,3]  <- 1 - sum(infect[nanp_3])/length(infect[nanp_3])

VE_pred[4,4]  <- 1 - sum(infect)/length(infect)



####################################################################################################################################
####################################################################################################################################
####################################################################################################################################
####################################################################################################################################


######################
##     SECTION 2    ##
##########################################
### Vaccine Efficacy Heatmap - Figure.5 ##
##########################################

## sample iteration number  
NN <- 2000 

## sequences to compute VE  ###
nanp_seq <- exp(seq(from=log(1000), to=log(2.0*max(nanp)), length=NN))
av_seq <- exp(seq(from=log(0.8), to=log(100), length=NN))

## Vaccine Efficacy Function ###
VE <- function(nanp, av){
  DR <- ( 1/(1+(nanp/b_nanp)^a_nanp) )*exp(-log(2)*av/b_av)
  VE_inf <- (r/(n*DR+r))^r
  VE_inf <- 1 - (1-VE_inf)/(1-(1-p)^r)
  
  VE_inf
}

### matrix to store VE prediction ###
VE_mat <- matrix(NA, nrow=NN, ncol=NN)

for(i in 1:nrow(VE_mat)){
  VE_mat[NN-i+1,] <- VE(nanp_seq, av_seq[NN-i+1])
}	

### plotting parameters  ###
Ncol = 10000
pp <- 0.5
colours = colorRampPalette(brewer.pal(9,"YlOrRd"))(10000)

col.sample <- seq(from=1, to=Ncol^(1/pp), length=floor(sqrt(Ncol)) )
col.sample <- floor(col.sample^pp)

colours <- colours[col.sample]

image.plot(x=nanp_seq, y=av_seq, z=t(VE_mat), col=colours, log="x",
           xlab=expression(paste( " Anti-NANP Antibody Titre ")), ylab="Avidity Index",
           legend.lab="Vaccine Efficacy", xaxt='n',
                      axis.args=list(at=c(0.2,0.4,0.6,0.8,1),
                          labels=c("20%", "40%", "60%" , "80%", "100%")), las=1) 

axis(1, at=c(1000,2000,5000,10000,20000,50000,100000), label=c("1000", "2000", "5000", 
                                                               "10000", "20000", "50000", "100000"))

### calculate interquartile ranges  ###
nanp_med <- quantile(NANP, prob=0.5)
nanp_low <- quantile(NANP, prob=0.1)
Ananp_high <- quantile(NANP, prob=0.9)

av_med  <- quantile(avidity, prob=0.5)
av_low  <- quantile(avidity, prob=0.1)
av_high <- quantile(avidity, prob=0.9)

points(x=rep(nanp_med,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1.5, col="grey39")
points(x=rep(nanp_low,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1, col="grey39")
points(x=rep(nanp_high,2), y=c(0.001, 1000000), 
       type='l', lty="longdash", lwd=1, col="grey39")

points(x=c(0.001, 1000000), y=rep(av_med,2),
       type='l', lty="longdash", lwd=1.5, col="grey39")
points(x=c(0.001, 1000000), y=rep(av_low,2),
       type='l', lty="longdash", lwd=1, col="grey39")
points(x=c(0.001, 1000000), y=rep(av_high,2), 
       type='l', lty="longdash", lwd=1, col="grey39")

### data points ###
infect_col <- rep("white", length(infect_fx))

# infected fx 
infect_col[which(infect_fx==1)] <- "greenyellow"

infect_col2 <- rep("white", length(infect_std))

infect_col2[which(infect_std==1)] <- "greenyellow"

points(x=nanp_fx, y=avidity_fx, pch="*", cex=2, col=infect_col)
points(x=nanp_std, y=avidity_std, pch=19, cex=1.3, col=infect_col2)


### Calculate isoclines ###
av_long <- exp(seq(from=log(0.001), to=log(100), length=100000))

av_30 <- rep(NA, NN)
av_50 <- rep(NA, NN)
av_70 <- rep(NA, NN)
av_90 <- rep(NA, NN)

for(i in 1:NN){
  av_30[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.3)^2 ) ] 	
  av_50[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.5)^2 ) ]
  av_70[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.7)^2 ) ]
  av_90[i] <- av_long[ which.min( (VE(nanp_seq[i], av_long) - 0.9)^2 ) ]
}

points(x=nanp_seq, y=av_30, type='l', lwd=2)
points(x=nanp_seq, y=av_50, type='l', lwd=2)
points(x=nanp_seq, y=av_70, type='l', lwd=2)
points(x=nanp_seq, y=av_90, type='l', lwd=2)

### add labels for isoklines ###

text(y=3+av_30[1], x=1500, labels="30%")
text(y=3+av_50[1], x=1500, labels="50%") 
text(y=2+av_70[1], x=1500, labels="70%")
text(y=2+av_80[1], x=1500, labels="90%") 
 


####################################################################################################################################
####################################################################################################################################
####################################################################################################################################
####################################################################################################################################

##########################################################################
## SECTION 3 
## VE dose response graphs for each immune measurement  
###########################################################################

### extract posterior medians and calculate VE for each increasing immune measurement with the other antibody characteristic held constant (have chosen the median value here, can also set at an arbitary value) ###

###===========================================================================================================================
## 1 VE for each unit increase in anti-nanp antibody titre
##

## best fitting median parameter values  
par_median = apply(X=MCMC_burn_M5[,1:7], MARGIN=2, FUN=median)

## nanp_sequence  
nanp_seq = exp( seq(from=log(1), to=log(1.5*max(NANP)), length=200) )

############################
## VE efficacy model to calculate  
model_VE <- function(nanp, avidity, par_M5){
  n          <- par_M5[1]
  sig_n      <- par_M5[2]
  sig_mu     <- par_M5[3]
  b_nanp     <- par_M5[4]
  a_nanp     <- par_M5[5]
  b_av       <- par_M5[6]
  
  ############################
  ## Secondary NB parameters
  
  p = (sig_n^2-n)/(sig_n^2)
  r = (n^2)/(sig_n^2-n)

  #############################
  ## Dose response
  
  DR <- ( 1/(1+(nanp/b_nanp)^a_nanp) )* exp( -log(2)*(avidity/b_av) )
  
  #####################################
  ## Vaccine Efficacy Against Infection 
  
  VE_inf <- (r/(n*DR+r))^r
  VE_inf <-  1 - (1-VE_inf)/(1-(1-p)^r)
  VE_inf <- mean( VE_inf )
  
  VE_inf
    
}

model_VE = cmpfun(model_VE, options=list(optimize=3))

## prediction ##
median_av <- median(avidity) 

M5_par_median_pred = sapply(nanp_seq, model_VE, avidity=median_av, par=par_median)

### posterior prediction intervals ###
N_sam = 100000
sam_seq = round(seq(from=1, to=nrow(MCMC_burn_M5), length=N_sam))

M2_sam_cs = matrix(NA, nrow=N_sam, ncol=length(nanp_seq))

for(k in 1:N_sam){
  M2_sam_cs[k,] = sapply(nanp_seq, model_VE, avidity=median_av, par=MCMC_burn_M5[sam_seq[k],1:6])
}


M2_quant_cs = matrix(NA, nrow=3, ncol=length(nanp_seq))

for(j in 1:length(nanp_seq)){
  M2_quant_cs[,j] = quantile( M2_sam_cs[,j], prob=c(0.025, 0.5, 0.975) )
}

###############################
## Plotting 

## construct a histogram out of polygons ##
bars <- 10

breaks <- exp( seq( from=log(min(0.99*NANP)), to=log(max(NANP)), length=bars+1) )

counts <- rep(0, bars)

for(i in 1:length(NANP)){
  for(j in 1:bars){
    
    if( (NANP[i]>breaks[j]) && (NANP[i]<=breaks[j+1]) ){
      counts[j] <- counts[j] + 1 
    }
  }
}

counts <- 0.9*counts/max(counts)

### plot ###
### plots next to each other ### 

par(mfrow=c(1,2))

plot(x=nanp_seq, y=M2_quant_cs[2,], type='l', log="x",
     ylim=c(0,1.05), xlim=c(1000, max(nanp_seq)), yaxt = "n", xaxt='n',
     xlab=expression(paste( "Anti-NANP Antibody Titre ")),
     ylab="Vaccine Efficacy (%)", las=1)
axis(1, at=c(1000,  10000,  100000), label=c("1,000", "10,000", "100,000")) 
axis(2, at=c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0), label=c(0, 20, 40, 60,80,100), las=1)

for(j in 1:bars){
  polygon(x=c(breaks[j:(j+1)], rev(breaks[j:(j+1)]) ),
          y=c(0, 0, rep(counts[j], 2) ),
          col=rgb(190/256,190/256,190/256,0.4) )
}

polygon(x=c(nanp_seq, rev(nanp_seq)), 
        y=c( M2_quant_cs[1,], rev(M2_quant_cs[3,]) ),
        col=rgb(255/256,165/256,0/256,0.4), border=NA)

points(x=nanp_seq, y=M2_quant_cs[2,], 
       type='l', lwd=3, col="darkorange")

legend(x="topleft", 
       legend = c("efficacy against infection" ), 
       col = c("darkorange"),
       lwd = 3,  bty='n', lty=c(1,1) )


##=====================================================================================================================
## 2 VE for each unit increase in Avidity with titre held constant 

#############################################
## Extract posterior medians and calculate model prediction

avidity_seq = avidity_seq <- seq(from=0, to=100, length=200)

############################
## VE calculation 
model_VE <- function(nanp, avidity, par_M5){
  n          <- par_M5[1]
  sig_n      <- par_M5[2]
  sig_mu     <- par_M5[3]
  b_nanp     <- par_M5[4]
  a_nanp     <- par_M5[5]
  b_av       <- par_M5[6]
  
  
  ############################
  ## Secondary NB parameters
  
  p = (sig_n^2-n)/(sig_n^2)
  r = (n^2)/(sig_n^2-n)
  
  
  #############################
  ## Dose response
  
  DR <-  exp( -log(2)*(avidity/b_av) ) #( 1/(1+(nanp/b_nanp)^a_nanp) )
  
  #############################
  ## VE against infection 
  VE_inf <- (r/(n*DR+r))^r
  VE_inf <-  1 - (1-VE_inf)/(1-(1-p)^r)
  VE_inf <- mean( VE_inf )
  
  VE_inf
    
}

model_VE = cmpfun(model_VE, options=list(optimize=3))

M5_par_median_pred_av = sapply(avidity_seq, model_VE, nanp=median_nanp, par=par_median)

#############################################
## Posterior prediction intervals 

median_nanp <- median(nanp) 

N_sam = 10000
sam_seq = round(seq(from=1, to=nrow(MCMC_burn_M5), length=N_sam))

M2_sam_av = matrix(NA, nrow=N_sam, ncol=length(avidity_seq))

for(k in 1:N_sam){
  M2_sam_av[k,] = sapply(avidity_seq, model_VE, nanp=median_nanp, par=MCMC_burn_M5[sam_seq[k],1:6])
}

M2_quant_av = matrix(NA, nrow=3, ncol=length(avidity_seq))

for(j in 1:length(avidity_seq)){
  M2_quant_av[,j] = quantile( M2_sam_av[,j], prob=c(0.025, 0.5, 0.975) )
}

########################################################
## Construct a histogram out of polygons

bars <- 10

breaks <- exp( seq( from=log(min(0.99*avidity)), to=log(max(avidity)), length=bars+1) )

counts <- rep(0, bars)

for(i in 1:length(avidity)){
  for(j in 1:bars){
    
    if( (avidity[i]>breaks[j]) && (avidity[i]<=breaks[j+1]) ){
      counts[j] <- counts[j] + 1 
    }
  }
}

counts <- 0.9*counts/max(counts)


#########################################################
## plot infection blocking efficacy 

plot(x=avidity_seq, y=M2_quant_av[2,], type='l',  
     ylim=c(0,1.05), xlim=c(1, max(avidity_seq)), yaxt='n', xaxt='n',
     xlab=expression(paste( "Anti-NANP Avidity Index")),
     ylab="Vaccine Efficacy (%)") 

axis(1, at=c(1,20,50,70,100), label=c(1,20,50,70,100)) #cex.axis=axis.size)
axis(2, at=c(0.0,0.2, 0.4, 0.6, 0.8, 1.0), label=c(0, 20, 40, 60, 80, 100), las=1)

for(j in 1:bars){
  polygon(x=c(breaks[j:(j+1)], rev(breaks[j:(j+1)]) ),
          y=c(0, 0, rep(counts[j], 2) ),
          col=rgb(190/256,190/256,190/256,0.4) )
}		

points(x=avidity_seq, y=M2_quant_av[2,], 
       type='l', lwd=3, col="darkorange") 

polygon(x=c(avidity_seq, rev(avidity_seq)), 
        y=c( M2_quant_av[1,], rev(M2_quant_av[3,]) ),
        col=rgb(255/256,165/256,0/256,0.4), border=NA)

legend(x="topleft", 
       legend = c("efficacy against infection" ), 
       col = c("darkorange"),
       lwd = 3,  bty='n', lty=c(1,1) )
       
       
	

